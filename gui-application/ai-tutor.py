
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, simpledialog
import os
import json
import fitz  # PyMuPDF
import docx

PROGRESS_FILE = "user_progress.json"

class AiTutorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("ai tutor - your learning companion")
        self.sections = []
        self.current_section_index = 0
        self.completed_sections = set()
        self.quiz_scores = {}
        self.current_file = None
        self.progress_data = self.load_progress()

        self.upload_button = tk.Button(root, text="Upload Chapter", command=self.upload_file)
        self.upload_button.pack(pady=10)

        self.section_display = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=80, height=20)
        self.section_display.pack(padx=10, pady=10)

        self.summary_button = tk.Button(root, text="Generate Summary", command=self.generate_summary)
        self.summary_button.pack(side=tk.LEFT, padx=10, pady=5)

        self.quiz_button = tk.Button(root, text="Generate Quiz", command=self.generate_quiz)
        self.quiz_button.pack(side=tk.LEFT, padx=10, pady=5)

        self.complete_button = tk.Button(root, text="Mark as Completed", command=self.mark_completed)
        self.complete_button.pack(side=tk.LEFT, padx=10, pady=5)

        self.next_button = tk.Button(root, text="Next Section", command=self.next_section)
        self.next_button.pack(side=tk.RIGHT, padx=10, pady=5)

        self.dashboard_button = tk.Button(root, text="Dashboard", command=self.show_dashboard)
        self.dashboard_button.pack(side=tk.RIGHT, padx=10, pady=5)

        self.progress_label = tk.Label(root, text="Progress: 0/0 sections completed")
        self.progress_label.pack(pady=5)

    def load_progress(self):
        if os.path.exists(PROGRESS_FILE):
            with open(PROGRESS_FILE, 'r') as f:
                return json.load(f)
        return {}

    def save_progress(self):
        with open(PROGRESS_FILE, 'w') as f:
            json.dump(self.progress_data, f, indent=2)

    def upload_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt"), ("PDF files", "*.pdf"), ("Word Documents", "*.docx")])
        if not file_path:
            return
        self.current_file = os.path.basename(file_path)
        content = self.extract_text(file_path)
        self.sections = [s.strip() for s in content.split('\n\n') if s.strip()]
        self.current_section_index = 0
        self.completed_sections = set(self.progress_data.get(self.current_file, {}).get("completed_sections", []))
        self.quiz_scores = self.progress_data.get(self.current_file, {}).get("quiz_scores", {})
        self.display_section()
        self.update_progress()

    def extract_text(self, file_path):
        if file_path.endswith(".txt"):
            with open(file_path, 'r', encoding='utf-8') as f:
                return f.read()
        elif file_path.endswith(".pdf"):
            doc = fitz.open(file_path)
            text = ""
            for page in doc:
                text += page.get_text()
            return text
        elif file_path.endswith(".docx"):
            doc = docx.Document(file_path)
            return "\n\n".join([para.text for para in doc.paragraphs])
        else:
            return ""

    def display_section(self):
        if self.sections:
            self.section_display.delete(1.0, tk.END)
            section_text = self.sections[self.current_section_index]
            self.section_display.insert(tk.END, section_text)
        else:
            self.section_display.delete(1.0, tk.END)
            self.section_display.insert(tk.END, "No sections available.")

    def generate_summary(self):
        messagebox.showinfo("Summary", "This is a placeholder for the summary generated by the LLM.")

    def generate_quiz(self):
        result = messagebox.askyesno("Quiz", "This is a placeholder for the quiz. Did you answer correctly?")
        self.quiz_scores[str(self.current_section_index)] = int(result)
        self.save_current_progress()

    def mark_completed(self):
        self.completed_sections.add(self.current_section_index)
        self.save_current_progress()
        self.update_progress()

    def next_section(self):
        if self.current_section_index + 1 < len(self.sections):
            self.current_section_index += 1
            self.display_section()
        else:
            messagebox.showinfo("End", "You have reached the end of the chapter.")

    def update_progress(self):
        total = len(self.sections)
        completed = len(self.completed_sections)
        self.progress_label.config(text=f"Progress: {completed}/{total} sections completed")

    def save_current_progress(self):
        if self.current_file:
            self.progress_data[self.current_file] = {
                "completed_sections": list(self.completed_sections),
                "quiz_scores": self.quiz_scores
            }
            self.save_progress()

    def show_dashboard(self):
        dashboard = tk.Toplevel(self.root)
        dashboard.title("Progress Dashboard")
        text = tk.Text(dashboard, wrap=tk.WORD, width=80, height=20)
        text.pack(padx=10, pady=10)
        for file, data in self.progress_data.items():
            completed = len(data.get("completed_sections", []))
            total = len(data.get("quiz_scores", {}))
            correct = sum(data.get("quiz_scores", {}).values())
            accuracy = f"{(correct / total * 100):.1f}%" if total > 0 else "N/A"
            text.insert(tk.END, f"{file}\n  Sections Completed: {completed}\n  Quiz Accuracy: {accuracy}\n\n")

if __name__ == "__main__":
    root = tk.Tk()
    app = AiTutorApp(root)
    root.mainloop()
